// LeetCode - Search in Rotated Sorted Array

// S1
// Time Complexity: O(n)
// Space Complexity: O(1)
// Hint: Binary Search, Array

/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?   ---> O(log n) to O(n)
Write a function to determine if a given target is in the array.
*/

/*
Website: 
http://codeganker.blogspot.com/2014/03/search-in-rotated-sorted-array-ii.html\

Analysis:
如果我们遇到中间和边缘相等的情况，我们就丢失了哪边有序的信息，因为哪边都有可能是有序的结果。
假设原数组是{1,2,3,3,3,3,3}，那么旋转之后有可能是{3,3,3,3,3,1,2}，或者{3,1,2,3,3,3,3}，
这样的我们判断左边缘和中心的时候都是3，如果我们要寻找1或者2，我们并不知道应该跳向哪一半。解决的办法只能是对边缘移动一步，
直到边缘和中间不在相等或者相遇，这就导致了会有不能切去一半的可能。所以最坏情况（比如全部都是一个元素，
或者只有一个元素不同于其他元素，而他就在最后一个）就会出现每次移动一步，总共是n步，算法的时间复杂度变成O(n)。
*/

public class Solution {
    public boolean search(int[] A, int target) {
        if (A == null || A.length == 0)
            return false;
        
        int l = 0;
        int r = A.length - 1;
        
        while (l <= r) {
            int m = (l + r) / 2;
            if (target == A[m])
                return true;
            
            if (A[l] < A[m]) {      // left half is sorted
                if (A[m] > target && A[l] <= target)
                    r = m - 1;
                else
                    l = m + 1;
            } 
            else if (A[l] > A[m]) {  // right half is sorted
                if (A[m] < target && A[r] >= target)
                    l = m + 1;
                else
                    r = m - 1;
            }
            else {                   // A[l] == A[m], worst cast O(n)
                l++;                    
            }  
        }        
        return false;
    }
}



// S2 - Bruce Force
// Time Complexity: O(n)
// Space Complexity: O(1)
// Hint: Binary Search, Array

/*
Website: 
http://answer.ninechapter.com/solutions/search-in-rotated-sorted-array-ii/

Analysis:
it ends up the same as sequential search
We used linear search for this question just to indicate that the 
time complexity of this question is O(n) regardless of binary search is applied or not.
*/

public class Solution {
    public boolean search(int[] A, int target) {
        for (int i = 0; i < A.length; i++) {
            if (A[i] == target) {
                return true;
            }
        }
        return false;
    }
}
